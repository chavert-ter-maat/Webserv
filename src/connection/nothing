
void ClientConnection::addSocketsToPollfdContainer() {
    _serverClientSockets.clear();

    for (const auto &server : _ptrServerConnection->_connectedServers) {
        PollfdConfig serverSocket = { {server.serverFD, POLLIN, 0}, server._config };
        _serverClientSockets.push_back(serverSocket);
    }

    for (const auto &client : _connectedClients) {
        PollfdConfig clientSocket = { {client.clientFD, POLLIN, 0}, client._config };
        _serverClientSockets.push_back(clientSocket);
    }
}

void ClientConnection::setupClientConnection() {
    while (true) {
        addSocketsToPollfdContainer();
        int pollResult = poll(reinterpret_cast<pollfd*>(_serverClientSockets.data()), _serverClientSockets.size(), 100);
        if (pollResult < 0) {
            if (errno == EINTR) continue;
            logError("Poll failed");
            break;
        }

        checkConnectedClientsStatus();

        for (size_t i = 0; i < _serverClientSockets.size(); ++i) {
            if (_serverClientSockets[i].pfd.revents == 0) continue;

            if (_serverClientSockets[i].pfd.revents & POLLHUP) {
                _serverClientSockets[i].pfd.revents = POLLERR;
            }
            if (_serverClientSockets[i].pfd.revents & POLLERR) {
                handlePollErrorEvent(i);
            }
            if (_serverClientSockets[i].pfd.revents & POLLOUT) {
                handlePollOutEvent(i);
            }
            if (_serverClientSockets[i].pfd.revents & POLLIN) {
                if (isServerSocket(_serverClientSockets[i].pfd.fd)) {
                    acceptClients(_serverClientSockets[i].pfd.fd, i);
                } else {
                    handleInputEvent(i);
                }
            if (globalSignalReceived == 1)
		    {
			    logAdd("Signal received, closing server connection");
		    	break;
		    }
            }
        }
    }
}
